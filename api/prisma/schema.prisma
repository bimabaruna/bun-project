// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  name     String
  role_id  Int?

  contacts Contact[]
  orders   Order[]

  user_details    EmployeeDetails? @relation("UserEmployeeDetails")
  role            Role?            @relation(fields: [role_id], references: [id])
  stock_movements StockMovement[]

  @@map("users")
}

model EmployeeDetails {
  id         Int     @id @default(autoincrement())
  user_id    Int     @unique
  outlet_id  Int
  first_name String
  last_name  String?
  email      String
  phone      String
  position   String
  salary     Decimal

  shift  Shift[]
  user   User    @relation("UserEmployeeDetails", fields: [user_id], references: [id])
  outlet Outlet  @relation(fields: [outlet_id], references: [id])

  @@map("employee_details")
}

model Outlet {
  id          Int       @id @default(autoincrement())
  outlet_name String
  address     String
  phone       String
  createdAt   DateTime? @default(now())
  craetedBy   String?
  updateAt    DateTime?
  updatedBy   String?

  products  Product[]
  // employee Employee[]
  employees EmployeeDetails[]
  shift     Shift[]

  @@map("outlets")
}

model Contact {
  id         Int     @id @default(autoincrement())
  first_name String
  last_name  String?
  email      String?
  phone      String?

  user_id Int
  address Address[]

  user User @relation(fields: [user_id], references: [id])

  @@map("contacts")
}

model Address {
  id          Int     @id @default(autoincrement())
  street      String?
  city        String?
  province    String?
  country     String
  postal_code String

  contact_id Int

  contact Contact @relation(fields: [contact_id], references: [id])

  @@map("addresses")
}

// model Employee {
//   id         Int       @id @default(autoincrement())
//   username   String    @unique
//   password   String
//   name       String
//   outlet_id  Int
//   createdAt  DateTime? @default(now())
//   craetedBy  String?
//   updated_at DateTime? @updatedAt
//   updated_by String?
//   is_deleted Boolean   @default(false)
//   deleted_at DateTime?
//   deleted_by String?

//   orders Order[]
//   shift  Shift[]
//   outlet Outlet? @relation(fields: [outlet_id], references: [id])

//   @@map("employees")
// }

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  price       Decimal
  quantity    Int
  created_at  DateTime  @default(now())
  created_by  String
  updated_at  DateTime? @updatedAt
  updated_by  String?
  is_deleted  Boolean   @default(false)
  deleted_at  DateTime?
  deleted_by  String?
  category_id Int?
  outlet_id   Int?
  image_url   String?

  order_items      OrderItem[]
  outlet           Outlet?          @relation(fields: [outlet_id], references: [id])
  product_category ProductCategory? @relation(fields: [category_id], references: [id])
  stock_movements  StockMovement[]

  @@map("products")
}

model Order {
  id          Int         @id @default(autoincrement())
  cashier_id  Int
  order_date  DateTime    @default(now())
  total_price Decimal     @db.Decimal(10, 2)
  status      Orderstatus

  order_items     OrderItem[]
  payments        Payment[]
  stock_movements StockMovement[]

  user User @relation(fields: [cashier_id], references: [id])

  @@map("orders")
}

model OrderItem {
  id             Int     @id @default(autoincrement())
  order_id       Int
  product_id     Int
  quantity       Int
  price_at_order Decimal @db.Decimal(10, 2)

  order   Order   @relation(fields: [order_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@map("order_items")
}

model Payment {
  id           Int      @id @default(autoincrement())
  order_id     Int
  payment_date DateTime @default(now())
  amount       Decimal  @db.Decimal(10, 2)
  status       String   @default("paid")

  method String
  order  Order  @relation(fields: [order_id], references: [id])

  @@map("payments")
}

model Role {
  id        Int    @id @default(autoincrement())
  role_name String

  users User[]

  @@map("role")
}

model ProductCategory {
  id            Int    @id @default(autoincrement())
  category_name String

  products Product[]

  @@map("product_category")
}

model Shift {
  id          Int       @id @default(autoincrement())
  employee_id Int
  outlet_id   Int
  start_time  DateTime
  end_time    DateTime?
  total_cash  Decimal

  employee EmployeeDetails @relation(fields: [employee_id], references: [id])
  outlet   Outlet          @relation(fields: [outlet_id], references: [id])

  @@map("shifts")
}

enum Orderstatus {
  on_progress
  completed
  cancelled
}

model StockMovement {
  id               Int               @id @default(autoincrement())
  product_id       Int
  user_id          Int // The employee (User) who initiated the movement
  order_id         Int? // Optional: Link to the Order if it's a SALE or CUSTOMER_RETURN
  quantity_changed Int // e.g., -2 for a sale, +50 for stock-in
  new_quantity     Int // The quantity of the product AFTER this movement
  type             StockMovementType
  notes            String? // Important for manual adjustments
  created_at       DateTime          @default(now())

  // Relations
  product Product @relation(fields: [product_id], references: [id])
  user    User    @relation(fields: [user_id], references: [id])
  order   Order?  @relation(fields: [order_id], references: [id])

  @@map("stock_movements")
}

enum StockMovementType {
  SALE // When a product is sold via an Order
  SUPPLIER_STOCK_IN // Receiving new stock from a supplier
  ADJUSTMENT_INCREASE // Manual count correction, finding extra stock
  ADJUSTMENT_DECREASE // Manual count correction, spoilage, damage, theft
  CUSTOMER_RETURN // Customer returns a product
  INITIAL_STOCK // Setting the initial quantity for a new product
}
