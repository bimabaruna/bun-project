// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  username String  @unique
  password String
  name     String
  role_id  Int?
  token    String?

  contacts Contact[]
  role     Role?   @relation(fields: [role_id], references: [id])

  @@map("users")
}

model Contact {
  id         Int     @id @default(autoincrement())
  first_name String
  last_name  String?
  email      String?
  phone      String?

  user_id Int
  address Address[]

  user User @relation(fields: [user_id], references: [id])

  @@map("contacts")
}

model Address {
  id          Int     @id @default(autoincrement())
  street      String?
  city        String?
  province    String?
  country     String
  postal_code String

  contact_id Int

  contact Contact @relation(fields: [contact_id], references: [id])

  @@map("addresses")
}

model Employee {
  id       Int     @id @default(autoincrement())
  username String  @unique
  password String
  name     String
  outlet_id Int?

  orders Order[]
  shift     Shift[]
  outlet Outlet? @relation(fields: [outlet_id], references: [id])
  

  @@map("employees")
  
}

model Outlet {
  id          Int     @id @default(autoincrement())
  outlet_name String
  address     String
  phone       String
  createdAt DateTime? @default(now())
  craetedBy String?
  updateAt DateTime?
  updatedBy String?

  products Product[]
  employee Employee[]
  shiift Shift[]

  @@map("outlets")
}

model Product {
  id         Int       @id @default(autoincrement())
  name       String
  price      Decimal
  quantity   Int
  created_at DateTime  @default(now())
  created_by String
  updated_at DateTime? @updatedAt
  updated_by String?
  is_deleted   Boolean  @default(false)
  deleted_at DateTime?
  deleted_by String?
  category_id Int?
  outlet_id   Int?
  image_url String?


  order_items OrderItem[]
  outlet  Outlet? @relation(fields: [outlet_id], references: [id])
  product_category ProductCategory? @relation(fields: [category_id], references: [id])
  

  @@map("products")
}

model Order {
  id          Int      @id @default(autoincrement())
  cashier_id Int
  order_date  DateTime @default(now())
  total_price Decimal  @db.Decimal(10, 2)
  status      String   @default("on_progress")

  order_items OrderItem[]
  payments    Payment[]

  user Employee @relation(fields: [cashier_id], references: [id])

  @@map("orders")
}

model OrderItem {
  id             Int     @id @default(autoincrement())
  order_id       Int
  product_id     Int
  quantity       Int
  price_at_order Decimal @db.Decimal(10, 2)

  order   Order   @relation(fields: [order_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@map("order_items")
}

model Payment {
  id           Int      @id @default(autoincrement())
  order_id     Int
  payment_date DateTime @default(now())
  amount       Decimal  @db.Decimal(10, 2)
  status       String   @default("paid")

  method String
  order  Order  @relation(fields: [order_id], references: [id])

  @@map("payments")
}

model Role {
  id        Int    @id @default(autoincrement())
  role_name String

  users     User[] 

  @@map("role")
}

model ProductCategory {
  id Int @id @default(autoincrement())
  category_name String

  products Product[]

  @@map("product_category")
}

model Shift {
  id Int @id @default(autoincrement())
  employee_id Int
  outlet_id Int
  start_time DateTime
  end_time DateTime?
  total_cash Decimal

  employee Employee @relation(fields: [employee_id], references: [id])
  outlet Outlet @relation(fields: [outlet_id], references: [id])


  @@map("shifts")
}

enum Orderstatus {
  on_progress
  completed
  cancelled

}

